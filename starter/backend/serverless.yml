# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: satyar2003
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: 'us-east-1'
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENTS_S3_BUCKET: serverless-todo-app-attachments-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

functions:

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true          
    iamRoleStatmentsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Query'
        Resource:
          - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.todosTable}'

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: src/models/create-todo-model.json
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource:
          - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.todosTable}'

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: src/models/update-todo-model.json
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
        Resource:
          - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.todosTable}'

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:DeleteItem'
        Resource:
          - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.todosTable}'

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:PutObject'
        Resource:
          - 'arn:aws:s3:::${self:custom.bucketName}/*'

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    AttachmentsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bucketName}

custom:
  todosTable: 'TodosTable'
  bucketName: 'serverless-todo-app-uploads'
  signedUrlExpiration: 300